Briefcase iOS Xcode Template
============================

A template for building Python apps that will run under iOS.

**This repository branch contains a template for Python 3.6**.
Other Python versions are available by cloning other branches of repository.

Using this template
-------------------

The easiest way to use this project is to not use it at all - at least,
not directly. `Briefcase <https://github.com/beeware/briefcase/>`__ is a
tool that uses this template, rolling it out using data extracted from
your ``setup.py``.

However, if you *do* want use this template directly...

1. Install `cookiecutter`_. This is a tool used to bootstrap complex project
   templates::

    $ pip install cookiecutter

2. Run ``cookiecutter`` on the the template::

    $ cookiecutter https://github.com/beeware/Python-iOS-template --checkout 3.6

3. `Download the Python Apple support package for iOS`_, and extract it into
   the ``support`` folder. This folder should have been generated by the
   cookiecutter template. This will give you a ``Python`` folder containing
   a self contained Python install.

   Alternatively, you can download the `Python-Apple-support`_ project, and
   build your own versions of these frameworks.

4. Add your code to the template. At the very minimum, you need to have an
   ``app/<app name>/app.py`` file that defines a ``PythonAppDelegate`` class.
   If ``<app name>`` contains a dash, it will be
   converted to an underscore in the expected package name

   If your code has any dependencies, they should be installed under the
   ``app_packages`` directory.

If you've done this correctly, a project with a formal name of ``My Project``,
with an app name of ```my-project`` should have a directory structure that
looks something like::

    myproject/
        myproject/
            app/
                myproject/
                    __init__.py
                    app.py (declares PythonAppDelegate)
            app_packages/
                ...
            ...
        My Project.xcodeproj/
            ...
        support/
            Python
            ...


You're now ready to open the XCode project file, build and run your project!

Next steps
----------

Of course, just running Python code isn't very interesting by itself - you'll
be able to output to the console, and see that output in XCode, but if you
tap the app icon on your phone, you won't see anything - because there isn't a
visible console on an iPhone.

To do something interesting, you'll need to work with the native iOS system
libraries to draw widgets and respond to screen taps. The `Rubicon`_
Objective C bridging library can be used to enable an easy interface with the
iOS system libraries. You could also use the `toga`_ library to provides a
cross-platform widget toolkit that supports iOS.

Regardless of whether you use Toga, or you write an application natively, the
template project will try to instantiate a ``UIApplicationMain`` instance,
using a class named ``PythonAppDelegate`` as the App delegate. If a class of
that name can't be instantiated, the error raised will be logged, and the
Python interpreter will be shut down.

If you have any external library dependencies (like ``toga``, or anything other
third-party library), you should install the library code into the
``app_packages`` directory. This directory is the same as a  ``site_packages``
directory on a desktop Python install.

.. _cookiecutter: https://github.com/cookiecutter/cookiecutter
.. _Download the Python Apple support package for iOS: https://briefcase-support.s3-us-west-2.amazonaws.com/python/3.6/iOS/Python-3.6-iOS-support.b8.tar.gz
.. _Python-Apple-support: http://github.com/beeware/Python-Apple-support
.. _Rubicon: http://beeware.org/project/projects/bridges/rubicon
.. _toga: http://beeware.org/project/projects/libraries/toga
